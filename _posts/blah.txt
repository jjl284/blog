One of the common questions asked by candidates during a culture interview is "how has the culture changed over the years?".  In my opinion, the largest shifts in engineering culture occurred due to changes in team structure and management.  Specifically, our decision to split into multiple teams, and our decision to switch from people managers to technical managers.

<hr/>

When I joined Medallia, we had 12 developers that all reported to a manager who reported to a VP and that VP reported directly to the CEO.

Like many startups, we were proud of our flat culture and there were no formal titles amongst the ICs (individual contributors).  Everybody was allowed to work on anything although individuals had areas of expertise and interests.

** Why did we break into teams? **

When we reached about two dozen developers, it became ridiculous to pretend we could all be on-call for every part of the product.  People were suffering from the overhead of context-switching and we recognized that each product area needed a roadmap and clear owners.

There are in general two ways to create teams; one is by assigning teams functional areas of the codebase and the other is to assign product features (which typically require building/extending different services unless the feature is an API, extremely minimally scoped, or code/system duplication is acceptable.  We experimented with both actually before settling on the functional approach.  In the product approach, code quality quickly loses consistency as owners transition.

** Why did breaking into teams cause a culture shift? **

Dividing into teams meant each single individual contributor no longer felt full ownership over problems outside of their team's domain of responsibility.  E.g. if I discover a race condition in the ORM layer exposed while building a feature for text analytics, I had to go through platform team to complete the fix.  There's nothing inherently wrong with this in itself, but fixing something yourself will always feel more agile/empowered than going through a barrier.  In addition, there were inevitably components which were not fully owned by any particular team like our testing frameworks and legacy features that became orphaned.

Lots of initiatives were taken to solve this including:
* "common good" system to reward efforts which benefited everybody
  * this was a shared pool of bug fixes, tooling ideas, etc that anybody could work on
* map product/code components to team responsibilities
* pursuit of microservices (also worth its own blog post)
* being explicit in new hire training that new perspectives are welcome on any parts of the codebase
* showing by example how to efficiently request fixes across team boundaries
* refactoring legacy components to respect team boundaries (API divisions)
* accountability metrics
* tiger teams to solve joint issues
* allow individuals to cross team boundaries

Disallowing people to cross boundaries means teams can block each other unless deadlines are strict via e.g. aligned sprint schedules, conservative estimates for planning, and acknowledging that other teams are "the customer".  Allowing people to cross team boundaries can help ease the friction but can bring its own issues.  Allowing individuals to temporarily contribute code to another team's codebase can cause issues since the writer/reviewer of code is not permanently responsible for the maintenance of his/her changes.  Allowing individuals to permanently cross team boundaries means certain individuals have now have "superpowers" compared to normal team members.  This can be ok if said power is used cautiously and judiciously.

To clarify, these issues were anticipated ahead of time and the change in feelings of ownership was a gradual transition, not an immediate change.

Inevitably with growth, splitting into teams becomes a necessity in order to protect and focus people/teams/resources.  However, it comes with a loss of ownership and impact for individual contributors.  With one team, the customer of each developer is the product team and by extension: our customers, or sales/marketing, or product support.  Withsplit teams, one should be clear that other teams are also customers (and adjust goals/metrics/priorities accordingly).

<hr/>

Managers in engineering are in the end responsible for which projects are funded and the allocation of resources towards those projects.  However, there are two distinct styles of management:
# people managers
# technical managers

People managers tend to play a more supportive role; enabling individuals by finding opportunities for them (e.g. technical projects, mentorship opportunities, leadership initiatives).  They ensure a team has the resources to accomplish tasks; whether it's bringing in an architect from another team, an external consultant, or bringing in other roles to assist (SRE, product support, product).  They rely on technical leads and product leads for technical and product-related decisions.

Technical managers tend to play a more direct role; from setting a technical vision, and defining metrics/goals, to choosing projects/libraries/frameworks to use, to actual writing and reviewing code.

When we initially split into teams, each team had a product manager, a unique tech lead, and our shared people manager.  As we grew and hired more managers, we originally focused on acquiring more people managers and separate efforts focused on finding strong tech leads to pair them with.

** Why did we change this? **

In short, it's very rare to find a manager candidate that is both strong enough technically to work with a tech lead, but wants to focus on people management instead.  Even when we found such candidates, they were high-performing and career-focused.  Progressing upwards towards director or VP positions requires showing an ability to handle increased responsibilities.  Demonstrating such proficiency is done by making the "right" calls for important decisions.  It's much easier to show that a technical decision was the right call vs. a people management decision and thus high-performing eng mgr candidates tended to desire technical impact in their role.

** How did this affect the culture? **

A tech lead is an individual contributor responsible for coding the best solutions for the team, product, company, and customers.  The rationale for these decisions are engineering-centric; debates about libraries/frameworks/maintainability/performance.

A people manager is a manager primarily responsible for the growth and development of individuals via allocation of resources towards projects (e.g. time, team members).  These decisions are much more subjective and touchy involving who is better at X or who would be more upset if they didn't get to work on Y.

Asking a people manager to give full transparency on decisions requires them to share private information about your coworkers.  But, as engineers we expect transparency from technical decisions.  Mixing those responsibilities into a single role now means a much higher level of trust placed on one person.

I've seen managers that are able to gain that trust, but near impossible for every manager in a growing company to acquire that level of trust.  Distrust of decisions quickly leads to an unhealthy culture.















Our original manager when I joined was a people manager.  We eventually realized that one manager can not manage two dozen direct reports.  Hiring was a necessity, but hiring "bad managers" was very dangerous:
* an uninspiring manager means engineering loses its drive/passion
* an overbearing manager causes high performers to seek more impact elsewhere
* a manager that avoids accountability can't deliver




Suffice it to say, we brainstormed heavily on creating a good interview process for our engineering manager (eng mgr) candidates.

When hiring people managers, the types of questions asked tend to be much more focused on interactions and conflict resolution as opposed to technical architecture and problem solving.  As with any on-site one-on-one interview, we can either dive into the candidate's past and/or poke at hypothetical scenarios.  Both are necessary to offer insight into experience and potential, but both can be very biased if you aren't careful in how questions are asked.

My typical flow went something like this for such interviews:
# Describe system architecture overview
  * test for technical understanding and areas of interest
  * test if they understand business/product perspective
  * can they spot frictions between teams
# Ask about their path from IC to management role
  * are they managing just because it's on the "career path"?
  * how do they balance the needs from within the team with external requests?
  * how do they evaluate teams and initiatives?
# Dive into conflict resolution scenarios
  * what happens when a project may miss a deadline?
  * inter-team conflicts (e.g. release team blocks a promised delivery date)
  * intra-team conflicts (e.g. senior developer doesn't appreciate perspectives from junior developer)
# Career path and motivation
  * how do you if team members are dissatisfied?
  * what happens when individuals want new roles/responsibilities?

In the end, evaluation for a people manager tends to be more subjective than technical interviews where correctness is more obvious.  There are certain signs which can clearly indicate a candidate that won't jell with the team though.  The ones that I most commonly used to justify passing on a candidate were:
* lack of interest/passion in developing individuals
* inability to admit failure
* lack of structure for fairly evaluating individuals and/or teams
  * this usually meant they didn't actually know what initiatives were working or not
* obsession with metrics (e.g. story points or LOC)
  * this is usually coupled with an inability to explain why those metrics mattered to ICs
  * this also usually correlated with excessive process (e.g. the religious scrum adherent)




 certain responsibilities including: hiring and retention for a team, career development for individuals, accountability for the performance of the team (and features/products owned).  However, (after interviewing around ~50 from an IC perspective), there tend to be two different types of managers: